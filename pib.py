# -*- coding: utf-8 -*-
"""PIB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KffHku-yJDexlmtKeL_s_PSd_u-k8kGk

# DESCRIÇÃO 

A atividade tem como principal objetivo realizar uma análise comparativa do crescimento do Produto Interno Bruto - PIB do Brasil em relação às regiões Sudeste e Nordeste. Para isso, será utilizada a tabela disponibilizada pelo IBGE de Produto Interno Bruto a preços correntes, que engloba o Brasil, suas mesoregiões, Estados, Distrito Federal e 12 capitais.
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import pearsonr
from google.colab import files
import plotly.graph_objects as go

url = "https://github.com/JoseNetoLemos/PIB/raw/main/COR.xlsx"
url1 = "https://github.com/JoseNetoLemos/PIB/raw/main/COR1.xlsx"
url2 = "https://github.com/JoseNetoLemos/PIB/raw/main/COR2.xlsx"

df = pd.read_excel(url, engine="openpyxl")
df1 = pd.read_excel(url1, engine="openpyxl")
df2 = pd.read_excel(url2, engine="openpyxl")

# EXIBIÇÃO DAS COLUNAS DO DATAFRAME df e df1
print(df.columns)
print(df1.columns)
print(df2.columns)

print("-----------------------------------------------------------------------")

# variáveis x e y recebendo a coluna BRASIL E NORDESTE
x = df['BRASIL']
y = df['NORDESTE']

# Calculando o coeficiente de correlação de Pearson e o valor-p
corr, p_value = pearsonr(x, y)
print("Coeficiente de Correlação de Pearson ENTRE BRASIL E NORDESTE:", corr)
print("Valor-p:", format(p_value, '.20f'))

# Verificando se o valor-p é menor que 0,05 para aceitar ou rejeitar a hipótese nula
if p_value < 0.01:
    print("Há evidências estatísticas suficientes para rejeitar a hipótese nula.")
    print("Há uma correlação significativa entre as variáveis.")
else:
    print("Não há evidências estatísticas suficientes para rejeitar a hipótese nula.")
    print("Não há uma correlação significativa entre as variáveis.")


print("-----------------------------------------------------------------------")



x = df['BRASIL']
y = df['SUDESTE']


corr, p_value = pearsonr(x, y)

print("Coeficiente de Correlação de Pearson ENTRE BRASIL E SUDESTE:", corr)
print("Valor-p:", format(p_value, '.20f'))


if p_value < 0.05:
    print("Há evidências estatísticas suficientes para rejeitar a hipótese nula.")
    print("Há uma correlação significativa entre as variáveis.")
else:
    print("Não há evidências estatísticas suficientes para rejeitar a hipótese nula.")
    print("Não há uma correlação significativa entre as variáveis.")


print("-----------------------------------------------------------------------")


x = df['BRASIL']
y = df['Sul']


corr, p_value = pearsonr(x, y)

print("Coeficiente de Correlação de Pearson ENTRE BRASIL E SUL:", corr)
print("Valor-p:", format(p_value, '.20f'))


print("-----------------------------------------------------------------------")


x = df['BRASIL']
y = df['Centro-Oeste']


corr, p_value = pearsonr(x, y)

print("Coeficiente de Correlação de Pearson ENTRE BRASIL E Centro-Oeste:", corr)
print("Valor-p:", format(p_value, '.20f'))


if p_value < 0.05:
    print("Há evidências estatísticas suficientes para rejeitar a hipótese nula.")
    print("Há uma correlação significativa entre as variáveis.")
else:
    print("Não há evidências estatísticas suficientes para rejeitar a hipótese nula.")
    print("Não há uma correlação significativa entre as variáveis.")


print("-----------------------------------------------------------------------")


x = df['BRASIL']
y = df['Norte']



corr, p_value = pearsonr(x, y)

print("Coeficiente de Correlação de Pearson ENTRE BRASIL E Norte:", corr)
print("Valor-p:", format(p_value, '.20f'))


if p_value < 0.05:
    print("Há evidências estatísticas suficientes para rejeitar a hipótese nula.")
    print("Há uma correlação significativa entre as variáveis.")
else:
    print("Não há evidências estatísticas suficientes para rejeitar a hipótese nula.")
    print("Não há uma correlação significativa entre as variáveis.")

print("-----------------------------------------------------------------------")

# Selecionar as colunas relevantes para cada região
df_regiao = df[['ANOS','NORDESTE', 'SUDESTE']]

# Criar uma figura do tipo "Line"
fig = go.Figure()

# Adicionar as linhas para cada região
for coluna in df_regiao.columns[1:]:
    fig.add_trace(go.Scatter(x=df_regiao['ANOS'], y=df_regiao[coluna], mode='lines+markers', name=coluna))

# Configurar os rótulos do eixo x e y
fig.update_xaxes(title_text='Ano')
fig.update_yaxes(title_text='Valor do PIB')

# Configurar o título do gráfico
fig.update_layout(title_text='PIB da Região Nordeste e Sudeste ao Longo dos Anos')

# Exibir o gráfico
fig.show()

df_regiao = df[['ANOS','NORDESTE', 'SUDESTE', 'Sul', 'Centro-Oeste', 'Norte']]
fig = go.Figure()

for coluna in df_regiao.columns[1:]:
    fig.add_trace(go.Scatter(x=df_regiao['ANOS'], y=df_regiao[coluna], mode='lines+markers', name=coluna))

fig.update_xaxes(title_text='Ano')
fig.update_yaxes(title_text='Valor do PIB')
fig.update_layout(title_text='PIB por Região do Brasil ao Longo dos Anos')
fig.show()

#CRIAÇÃO DO GRÁFICO DE COLUNAS  (BAR CHART)

fig = go.Figure()

for regiao in df1['REGIAO']:
    fig.add_trace(go.Bar(x=df1.columns[1:], y=df1[df1['REGIAO'] == regiao].values.flatten()[1:], name=regiao))


fig.update_xaxes(title_text='Ano')
fig.update_yaxes(title_text='Valor do PIB')


fig.update_layout(title_text='PIB por Região ao Longo dos Anos', barmode='stack')
fig.show()

# Criar uma figura do tipo gráfico de colunas agrupadas (grouped bar chart) 
fig = go.Figure()

# Adicionar as barras para cada região
for regiao in df1['REGIAO']:
    fig.add_trace(go.Bar(x=df1.columns[1:], y=df1[df1['REGIAO'] == regiao].values.flatten()[1:], name=regiao))

# Configurar os rótulos do eixo x e y
fig.update_xaxes(title_text='Ano', tickmode='array', tickvals=df1.columns[1:], ticktext=df1.columns[1:])
fig.update_yaxes(title_text='Valor do PIB')

# Configurar o título do gráfico
fig.update_layout(title_text='PIB por Região ao Longo dos Anos')

# Exibir o gráfico
fig.show()

# 'CAPITAIS', 2015, 2016, 2017, 2018, 2019, 2020], dtype='object'
fig = go.Figure()

# Adicionar as barras para cada região
for capital in df2['CAPITAIS']:
    fig.add_trace(go.Bar(x=df2.columns[1:], y=df2[df2['CAPITAIS'] == capital].values.flatten()[1:], name=capital))

# Configurar os rótulos do eixo x e y
fig.update_xaxes(title_text='Ano', tickmode='array', tickvals=df2.columns[1:], ticktext=df2.columns[1:])
fig.update_yaxes(title_text='Valor do PIB')

# Configurar o título do gráfico
fig.update_layout(title_text='PIB por CAPITAIS ao Longo dos Anos')

# Exibir o gráfico
fig.show()

